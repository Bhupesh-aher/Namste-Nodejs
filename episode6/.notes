- so why we can't directly use the functions and variables of one module/files
  into another module/files

- so in javascript if we have function and inside that function 
  we have variabe and another function then we can't access them outside the function beacuse of scope

- example 
function xyz() {
    const a = 5;

    function sum () {
        
    }
}

- now the scope of varible a and function sum() is inside the function xyz()
- we can not access them outside the xyz() 

- just like this node js also wrap the module/file inside a function (this function is IIFE)
- that's why when we directly try to access them it thruoghs an error

- first export function and variable and then access them 
- it will not thruogh an error

- example

module.exports = {} 

- and now if any fuction and variable we put inside the module exports = {}
- it will be accessable by other modules/files 


IIFE  -

(function () {

})()

- immediately invoked fuctions 
- it keeps variables and functions safe




(function () {
    const calculateMultiply = (a, b) => {
    const res = a *b;
    console.log(res);
    
}
    module.exports = {calculateMultiply};
})()


- this is what node js do when we call require() function 
- it just wrap module/file inside the function and that function is nothing but IIFE function 
- when we write require() statment, reqiure function wrapping our code inside IIFE 
- that's how it works



- how do you get access to module.export?

- IIFE gets module and require as parameter to it, that is paased by node js 
- it is given to IIFE by node js



(function (module, require) {
    const calculateMultiply = (a, b) => {
    const res = a *b;
    console.log(res);
    
}

module.exports = {calculateMultiply};
})()          // (module.export={}) 


- then this code is pass to v8 engine and v8 execute this code






- how require("/path") function works behind the scenes - 
- 5 steps that happens to get the module and execute the code

1. Resolving the module 
    - there can be different modules
        - ("./localpath")  
          - ("./calculate")
          - ("./xyz.js")
        - ("./json")
        - ("node:module")
          - ("node:util")     

2. loading the module 
    - file content/code is loaded accrording to file type ( ("./xyz.js"), ("./json"), ("node:util"))

3. wrap inside IIFE (compile step)
    - which we saw above 

4. Evloution
    - the code is executed
    - and module.export is returned outside

5. caching
    - then the module is cached
      
    - so the code of require("./xyz.js") will only run once
    - it will cache the execution of it
    - suppose xyz module is used by app.js, sum.js, multiply.js
    - then first time in app.js xyz module will follow above 4 steps and after that
      it will cache the exeution of it 
    - so next time if xyz module is required by sum.js and multiply.js  
      it will just returned from the cache
    - it will not do all the 4 steps, it will just return from cache
